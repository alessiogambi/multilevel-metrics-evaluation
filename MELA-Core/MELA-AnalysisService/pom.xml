<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
      <groupId>eu.celar.multilevel-metrics-evaluation</groupId>
      <artifactId>MELA-Core-Pom</artifactId>
      <version>0.1-SNAPSHOT</version>
    </parent>

    <artifactId>MELA-AnalysisService</artifactId>
    <packaging>war</packaging>
    <version>0.1-SNAPSHOT</version>

    <name>MELA-AnalysisService</name>
    <url>http://maven.apache.org</url>

    <properties>
	<jettyVersion>7.2.1.v20101111</jettyVersion>
    </properties>

    <dependencies>

	<!-- Jetty: Those are to run the application inside an embedded jetty  -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jettyVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jettyVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlet</artifactId>
			<version>${jettyVersion}</version>
		</dependency>

	<!-- -->

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
        </dependency>
        
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>14.0.1</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
        </dependency>   
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20090211</version>
        </dependency>
        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
            <version>1.1</version>
            <type>jar</type>
        </dependency>
       <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
    <!--     <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>0.1.50</version>
        </dependency>-->
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-atom</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-json</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-client</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-atom-abdera</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-apache-client</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-spring</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-multipart</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-guice</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-simple-server</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs.jersey-oauth</groupId>
            <artifactId>oauth-client</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs.jersey-oauth</groupId>
            <artifactId>oauth-server</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs.jersey-oauth</groupId>
            <artifactId>oauth-signature</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>xstream</groupId>
            <artifactId>xstream</artifactId>
            <version>1.2.2</version>
        </dependency>     
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
            <version>2.1.12</version>
        </dependency>
        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>2.11.0</version>
        </dependency>
        <!--Dependency on the Data Access module-->
        
        <dependency>
            <groupId>eu.celar.multilevel-metrics-evaluation</groupId>
            <artifactId>MELA-DataService</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        
        <dependency>
            <groupId>eu.celar.multilevel-metrics-evaluation</groupId>
            <artifactId>MELA-Common</artifactId>
            <version>0.1-SNAPSHOT</version>
            <type>jar</type>
        </dependency>
        
    </dependencies>

    <build>
        <plugins>
        
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.0.1</version>
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                </configuration>
            </plugin>

	<!-- mvn jetty:run will Run a Jetty server and automatically deploy the app. This is more for testing than production -->
		<plugin>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>jetty-maven-plugin</artifactId>
			<version>${jettyVersion}</version>
		</plugin>

	<!-- Package the application inside an executable war file to be run like java -jar <your-app>.war -->
	<!-- Enable: java -jar loadbalancer.war, which exploits an embedded jetty, 
				by copy Main.java into the war root and define the right entry in the MANIFEST 
				to start the server, and copy all the jetty deps, again, in the root package 
				to enable it to run -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>move-main-class</id>
						<phase>package</phase>
						<inherited>false</inherited>
						<configuration>
							<tasks>
								<copy todir="${project.build.directory}/${project.build.finalName}">
									<fileset
										dir="${project.build.directory}/${project.build.finalName}/WEB-INF/classes/">
										<include name="*.class" />
									</fileset>
								</copy>
								<unjar dest="${project.build.directory}/${project.build.finalName}">
									<fileset
										dir="${project.build.directory}/${project.build.finalName}/WEB-INF/lib/">
										<include name="jetty*" />
										<include name="servlet-api*" />
										<!-- Add here any other startup dependency -->
									</fileset>
									<patternset>
										<exclude name="META-INF/**/*" />
										<exclude name="images/**/*" />
										<exclude name=".options" />
										<exclude name="about.html" />
										<exclude name="jdtCompilerAdapter.jar" />
										<exclude name="plugin*" />
									</patternset>
								</unjar>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- We need to copy all the required classes in the right place at the right time. So we Force the ant plugin right in the middle of the war building process -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.3</version>

				<configuration>
					<archive>
						<manifest>
							<!-- By default a class called Main at the root of the project -->
							<mainClass>Main</mainClass>
						</manifest>
					</archive>
				</configuration>


				<executions>
					<execution>
						<!-- First step is to disable the default-war build step. -->
						<id>default-war</id>
						<phase>none</phase>
					</execution>
					<execution>
						<!-- Second step is to create an exploded war. Done in prepare-package -->
						<id>war-exploded</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>exploded</goal>
						</goals>
					</execution>
					<execution>
						<!-- Last step is to make sure that the war is built in the package 
							phase -->
						<id>custom-war</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
        </plugins>
    </build>
</project>
